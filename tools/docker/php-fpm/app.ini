; Please see the actual settings later in the document for more details as to why
; we recommend these changes in PHP's behavior.

; display_errors
;   Default Value: On
;   Development Value: On
;   Production Value: Off

; display_startup_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: Off

; error_reporting
;   Default Value: E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED
;   Development Value: E_ALL
;   Production Value: E_ALL & ~E_DEPRECATED & ~E_STRICT

; log_errors
;   Default Value: Off
;   Development Value: On
;   Production Value: On

; max_input_time
;   Default Value: -1 (Unlimited)
;   Development Value: 60 (60 seconds)
;   Production Value: 60 (60 seconds)

; This directive controls whether or not and where PHP will output errors,
; notices and warnings too. Error output is very useful during development, but
; it could be very dangerous in production environments. Depending on the code
; which is triggering the error, sensitive information could potentially leak
; out of your application such as database usernames and passwords or worse.
; For production environments, we recommend logging errors rather than
; sending them to STDOUT.
; Possible Values:
;   Off = Do not display any errors
;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)
;   On or stdout = Display errors to STDOUT
; Default Value: On
; Development Value: On
; Production Value: Off
; http://php.net/display-errors
; On
display_errors = On
; Besides displaying errors, PHP can also log errors to locations such as a
; server-specific log, STDERR, or a location specified by the error_log
; directive found below. While errors should not be displayed on productions
; servers they should still be monitored and logging is a great way to do that.
; Default Value: Off
; Development Value: On
; Production Value: On
; http://php.net/log-errors
log_errors = On
; https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#passing-uncontrolled-requests-to-php
cgi.fix_pathinfo=0
; Log errors to specified file. PHP's default behavior is to leave this value empty.
;See also: syslog(). If this directive is not set, errors are sent to the SAPI error logger.
; For example, it is an error log in Apache or stderr in CLI.
; https://php.net/error-log
; Example:
;error_log = php_errors.log
; error_log = /var/log/php-errors.log
; Log errors to syslog (Event Log on Windows).
;error_log = syslog

; Set maximum length of log_errors. In error_log information about the source is
; added. The default is 1024 and 0 allows to not apply any maximum length at all.
; http://php.net/log-errors-max-len
log_errors_max_len = 1024

;extension=apcu.so
error_reporting = E_ALL
date.timezone = "Europe/Madrid"
expose_php = Off
apc.enable_cli = 1
session.auto_start = 0
memory_limit = -1
max_input_time = 120
max_execution_time = 90
max_input_vars = 1000
# opcache
opcache.enable=1
opcache.enable_cli=1
opcache.use_cwd=0
opcache.interned_strings_buffer = 16
opcache.max_accelerated_files = 20000
opcache.memory_consumption=256
opcache.validate_timestamps=1
opcache.fast_shutdown=1
opcache.revalidate_freq=0
# JIT
opcache.jit_buffer_size=100M
opcache.jit=tracing
#opcache.jit_debug=1
# xdebug
#zend_extension=xdebug # enable via dockerfile
#xdebug.mode=develop,debug
#xdebug.start_with_request=yes
#xdebug.discover_client_host=1
#xdebug.client_host=host.docker.internal
#xdebug.client_port=9003
#xdebug.client_host=172.17.249.249

realpath_cache_size=4096K
realpath_cache_ttl=600
upload_max_filesize = 20M
post_max_size = 108M
default_socket_timeout=3600
request_terminate_timeout=600
; Defines the probability that the 'garbage collection' process is started on every
; session initialization. The probability is calculated by using gc_probability/gc_divisor,
; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.
; Default Value: 1
; Development Value: 1
; Production Value: 1
; http://php.net/session.gc-probability
session.gc_probability = 1

; Defines the probability that the 'garbage collection' process is started on every
; session initialization. The probability is calculated by using gc_probability/gc_divisor,
; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.
; For high volume production servers, using a value of 1000 is a more efficient approach.
; Default Value: 100
; Development Value: 1000
; Production Value: 1000
; http://php.net/session.gc-divisor
session.gc_divisor = 1000
; After this number of seconds, stored data will be seen as 'garbage' and
; cleaned up by the garbage collection process.
; http://php.net/session.gc-maxlifetime
session.gc_maxlifetime = 1440

; Document expires after n minutes.
; http://php.net/session.cache-expire
session.cache_expire = 180
; Define the User-Agent string. PHP's default setting for this is empty.
; http://php.net/user-agent
;user_agent="PHP"
